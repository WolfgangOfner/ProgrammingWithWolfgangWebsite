<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.programmingwithwolfgang.com/</id><title>Programming With Wolfgang</title><subtitle>A tech blog focusing on DevOps, Cloud, Azure, Kubernetes and Software Architecture.</subtitle> <updated>2021-04-19T20:03:14+02:00</updated> <author> <name>Wolfgang Ofner</name> <uri>https://www.programmingwithwolfgang.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://www.programmingwithwolfgang.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://www.programmingwithwolfgang.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> Â© 2021 Wolfgang Ofner </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Use a Database with a Microservice running in Kubernetes</title><link href="https://www.programmingwithwolfgang.com/microservice-with-database-kubernetes/" rel="alternate" type="text/html" title="Use a Database with a Microservice running in Kubernetes" /><published>2021-04-05T00:00:00+02:00</published> <updated>2021-04-05T00:00:00+02:00</updated> <id>https://www.programmingwithwolfgang.com/microservice-with-database-kubernetes/</id> <content src="https://www.programmingwithwolfgang.com/microservice-with-database-kubernetes/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="DevOps" /> <category term="Kubernetes" /> <summary> I showed in my last post how to automatically deploy database changes to your database. In this post, I will extend my microservice to use this database and also extend the deployment to provide a valid connection string. Update the Microservice to use a Database You can find the code of the demo on Github. So far, the microservice used an in-memory database. I want to keep the option to use... </summary> </entry> <entry><title>Automatically Deploy your Database with Dacpac Packages using Linux and Azure DevOps</title><link href="https://www.programmingwithwolfgang.com/deploy-dacpac-linux-azure-devops/" rel="alternate" type="text/html" title="Automatically Deploy your Database with Dacpac Packages using Linux and Azure DevOps" /><published>2021-03-21T00:00:00+01:00</published> <updated>2021-03-21T00:00:00+01:00</updated> <id>https://www.programmingwithwolfgang.com/deploy-dacpac-linux-azure-devops/</id> <content src="https://www.programmingwithwolfgang.com/deploy-dacpac-linux-azure-devops/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="DevOps" /> <category term="Cloud" /> <summary> I showed in my last post how to use SSDT to create a dacpac package and how to deploy it locally. The SSDT project uses .NET Framework 4.8 which means that it runs only on Windows. Azure DevOps has a task to deploy dacpac packages, but it also only supports Windows. To be able to use a Linux environment, I will create a .NET Core project to build the dacpac package and build my own Docker conta... </summary> </entry> <entry><title>Automatically deploy Database Changes with SSDT</title><link href="https://www.programmingwithwolfgang.com/automatically-deploy-database-changes/" rel="alternate" type="text/html" title="Automatically deploy Database Changes with SSDT" /><published>2021-03-08T00:00:00+01:00</published> <updated>2021-03-23T19:52:48+01:00</updated> <id>https://www.programmingwithwolfgang.com/automatically-deploy-database-changes/</id> <content src="https://www.programmingwithwolfgang.com/automatically-deploy-database-changes/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="DevOps" /> <summary> In my last post, I talked about deploying database changes automatically. Today, I will show how to use SSDT (SQS Server Data Tools) to generate a Dacpac package and how to deploy it to your SQL server. Prepare your Environment Before you can get started, you have to download the custom SSDT Tools from Github. These custom tools are an extension of the MSBuild.Sdk.SqlProj project and are nece... </summary> </entry> <entry><title>Automate Database Deployments</title><link href="https://www.programmingwithwolfgang.com/automate-database-deployments/" rel="alternate" type="text/html" title="Automate Database Deployments" /><published>2021-03-01T00:00:00+01:00</published> <updated>2021-03-15T22:20:21+01:00</updated> <id>https://www.programmingwithwolfgang.com/automate-database-deployments/</id> <content src="https://www.programmingwithwolfgang.com/automate-database-deployments/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="DevOps" /> <summary> DevOps has been around for some years now and most developers know what it means. In simple terms, it stands for a culture where you automate all your steps from code merges to tests and deployment. Doing this for an application is often quite simple. It gets way harder when database changes are involved though. In this post, I will show you three ways how to automatically apply your changes a... </summary> </entry> <entry><title>Replace Helm Chart Variables in your CI/CD Pipeline with Tokenizer</title><link href="https://www.programmingwithwolfgang.com/replace-helm-variables-tokenizer/" rel="alternate" type="text/html" title="Replace Helm Chart Variables in your CI/CD Pipeline with Tokenizer" /><published>2021-02-22T00:00:00+01:00</published> <updated>2021-02-22T00:00:00+01:00</updated> <id>https://www.programmingwithwolfgang.com/replace-helm-variables-tokenizer/</id> <content src="https://www.programmingwithwolfgang.com/replace-helm-variables-tokenizer/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="DevOps" /> <category term="Kubernetes" /> <summary> Helm is a great tool to deploy your application into Kubernetes. In my post, Helm - Getting Started, I also mentioned the values.yaml file which can be used to replace variables in the Helm chart. The problem with this approach is that the values.yaml file is hard-coded. In this post, I want to introduce Tokenizer which is a simple Azure DevOps extension with which you can replace variables in... </summary> </entry> </feed>
