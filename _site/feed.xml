<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://www.programmingwithwolfgang.com/</id><title>Programming With Wolfgang</title><subtitle>A tech blog focusing on DevOps, Cloud, Azure, Kubernetes and Software Architecture.</subtitle> <updated>2021-04-26T22:50:36+02:00</updated> <author> <name>Wolfgang Ofner</name> <uri>https://www.programmingwithwolfgang.com/</uri> </author><link rel="self" type="application/atom+xml" href="https://www.programmingwithwolfgang.com/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://www.programmingwithwolfgang.com/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 Wolfgang Ofner </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Replace RabbitMQ with Azure Service Bus Queues</title><link href="https://www.programmingwithwolfgang.com/replace-rabbitmq-azure-service-bus-queue/" rel="alternate" type="text/html" title="Replace RabbitMQ with Azure Service Bus Queues" /><published>2021-04-26T00:00:00+02:00</published> <updated>2021-04-26T00:00:00+02:00</updated> <id>https://www.programmingwithwolfgang.com/replace-rabbitmq-azure-service-bus-queue/</id> <content src="https://www.programmingwithwolfgang.com/replace-rabbitmq-azure-service-bus-queue/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="Cloud" /> <category term="DevOps" /> <summary> RabbitMQ is a great tool to connect microservices asynchronously but it also comes with a couple of downsides. The biggest downside is that you have to take care of running, monitoring, and updating it. Running a RabbitMQ Docker image in Kubernetes is quite easy but still requires some management. One of the best features of cloud provides are the platform as a service (PaaS) offerings. This me... </summary> </entry> <entry><title>Use Azure Container Registry in Kubernetes</title><link href="https://www.programmingwithwolfgang.com/azure-container-registry-kubernetes/" rel="alternate" type="text/html" title="Use Azure Container Registry in Kubernetes" /><published>2021-04-19T00:00:00+02:00</published> <updated>2021-04-19T00:00:00+02:00</updated> <id>https://www.programmingwithwolfgang.com/azure-container-registry-kubernetes/</id> <content src="https://www.programmingwithwolfgang.com/azure-container-registry-kubernetes/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="Kubernetes" /> <category term="DevOps" /> <summary> Dockerhub is like GitHub for Docker containers. You can sign up for free and get unlimited public repos and one private repo. This is great for developers like me who want to make their containers easily accessible for everyone. Enterprises probably don’t want to have their containers on a public share. They can either buy an enterprise plan or they can use a private registry like Azure Contain... </summary> </entry> <entry><title>Readiness and Liveness Probes in Kubernetes</title><link href="https://www.programmingwithwolfgang.com/readiness-health-probes-kubernetes/" rel="alternate" type="text/html" title="Readiness and Liveness Probes in Kubernetes" /><published>2021-04-12T00:00:00+02:00</published> <updated>2021-04-12T00:00:00+02:00</updated> <id>https://www.programmingwithwolfgang.com/readiness-health-probes-kubernetes/</id> <content src="https://www.programmingwithwolfgang.com/readiness-health-probes-kubernetes/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="Kubernetes" /> <category term="DevOps" /> <summary> Kubernetes automatically checks if a pod is healthy and also when it is ready to accept traffic. These checks are done using a readiness probe and liveness probe respectively. This post shows how to configure these probes in a .NET 5 microservice and how to configure them in Kubernetes using Helm charts. Liveness Probe Kubernetes regularly checks whether a pod is still alive or not. To check ... </summary> </entry> <entry><title>Use a Database with a Microservice running in Kubernetes</title><link href="https://www.programmingwithwolfgang.com/microservice-with-database-kubernetes/" rel="alternate" type="text/html" title="Use a Database with a Microservice running in Kubernetes" /><published>2021-04-05T00:00:00+02:00</published> <updated>2021-04-05T00:00:00+02:00</updated> <id>https://www.programmingwithwolfgang.com/microservice-with-database-kubernetes/</id> <content src="https://www.programmingwithwolfgang.com/microservice-with-database-kubernetes/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="DevOps" /> <category term="Kubernetes" /> <summary> I showed in my last post how to automatically deploy database changes to your database. In this post, I will extend my microservice to use this database and also extend the deployment to provide a valid connection string. Update the Microservice to use a Database You can find the code of the demo on Github. So far, the microservice used an in-memory database. I want to keep the option to use... </summary> </entry> <entry><title>Automatically Deploy your Database with Dacpac Packages using Linux and Azure DevOps</title><link href="https://www.programmingwithwolfgang.com/deploy-dacpac-linux-azure-devops/" rel="alternate" type="text/html" title="Automatically Deploy your Database with Dacpac Packages using Linux and Azure DevOps" /><published>2021-03-21T00:00:00+01:00</published> <updated>2021-03-21T00:00:00+01:00</updated> <id>https://www.programmingwithwolfgang.com/deploy-dacpac-linux-azure-devops/</id> <content src="https://www.programmingwithwolfgang.com/deploy-dacpac-linux-azure-devops/" /> <author> <name>Wolfgang Ofner</name> </author> <category term="DevOps" /> <category term="Cloud" /> <summary> I showed in my last post how to use SSDT to create a dacpac package and how to deploy it locally. The SSDT project uses .NET Framework 4.8 which means that it runs only on Windows. Azure DevOps has a task to deploy dacpac packages, but it also only supports Windows. To be able to use a Linux environment, I will create a .NET Core project to build the dacpac package and build my own Docker conta... </summary> </entry> </feed>
